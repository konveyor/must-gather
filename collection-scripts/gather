#!/bin/bash

# Default to gathering 72h of logs unless specified as var
logs_since="${logs_since:-72h}"

unset KUBECONFIG
for localns in $(/usr/bin/oc get migrationcontrollers.migration.openshift.io --all-namespaces --no-headers | awk '{print $1}'); do
  clusters=()
  clusters+=(host)
  # get all migclusters
  for c in $(oc -n ${localns} get migclusters -o custom-columns=name:.metadata.name --no-headers); do
    # only take non-host cluster
    if [ $(oc -n ${localns} get migcluster ${c} -o go-template='{{ .spec.isHostCluster }}') == "false" ]; then
      clusters+=(${c})
    fi
  done
  echo "Will collect debug info from migclusters [${clusters[@]}]"

  # Find the latest migration, plan, and associated namespaces so we can gather additional info from those
  latest_migration=$(oc -n ${localns} get migmigration -o json | jq -r '.items|=sort_by(.metadata.creationTimestamp)' | jq -r '.items[-1].metadata.name')
  latest_migration_plan=$(oc -n ${localns} get migmigration ${latest_migration} -o jsonpath={.spec.migPlanRef.name})
  latest_migration_namespaces=$(oc -n ${localns} get migplan ${latest_migration_plan} -o json | jq -r '.spec.namespaces[]')
  latest_migration_clusters=$(oc -n ${localns} get migplan ${latest_migration_plan} -o json | jq -r '.spec.destMigClusterRef.name, .spec.srcMigClusterRef.name')

  # Iterate over all connected non-host OpenShift clusters
  for cluster in ${clusters[@]}; do
    unset KUBECONFIG
    if [ ${cluster} != "host" ]; then
      echo "[cluster=${cluster}] Performing token login"
      token=$(oc get -n $(oc get -n ${localns} migcluster ${cluster} -o go-template='{{ .spec.serviceAccountSecretRef.namespace }}') secret $(oc get -n ${localns} migcluster ${cluster} -o go-template='{{ .spec.serviceAccountSecretRef.name }}') -o go-template='{{ .data.saToken }}' | base64 -d)
      url=$(oc get -n ${localns} migcluster ${cluster} -o go-template='{{ .spec.url }}')
      export KUBECONFIG=/tmp/kubeconfig
      oc login --insecure-skip-tls-verify=true --token=${token} $url
      if [ "$?" != "0" ]; then
        object_collection_path="/must-gather/clusters/${cluster}/"
        mkdir -p ${object_collection_path}
        echo "Login to migcluster ${cluster} unsuccessful."  > "${object_collection_path}/login_error.txt"
        continue
      fi
    fi

    # Build list of namespaces where MTC is installed
    namespaces=()
    for ns in $(/usr/bin/oc get migrationcontrollers.migration.openshift.io --all-namespaces --no-headers | awk '{print $1}')
    do
      echo "[cluster=${cluster}][namespace=${ns}] Detected MTC installation"
      namespaces+=(${ns})
    done

    # Check if this cluster has a migrated namespace we want to oc adm inspect
    for ns in ${latest_migration_namespaces}; do
      echo "[cluster=${cluster}][namespace=${ns}][migration=${latest_migration}][plan=${latest_migration_plan}] Running oc adm inspect on namespace that is part of latest migration and plan"
      mkdir -p must-gather/clusters/${cluster}/migrated-namespaces
      /usr/bin/oc adm inspect --dest-dir must-gather/clusters/${cluster}/migrated-namespaces ns/${ns} &
    done

    # Collect all resources in MTC namespaces with must-gather
    for ns in ${namespaces[@]}; do
      echo "[cluster=${cluster}][namespace=${ns}] Running oc adm inspect"
      /usr/bin/oc adm inspect --dest-dir must-gather/clusters/${cluster} --all-namespaces ns/${ns} &
    done

    # Collect PV and StorageClass info for cluster
    echo "[cluster=${cluster}] Running oc adm inspect storageclasses,persistentvolumes"
    usr/bin/oc adm inspect --dest-dir must-gather/clusters/${cluster} storageclasses,persistentvolumes &

    # Collect Route and Service info needed to troubleshoot direct image migration connection
    for ns in default openshift-image-registry; do
      echo "[cluster=${cluster}][namespace=${ns}] Running oc adm inspect route,service"
      /usr/bin/oc adm inspect --dest-dir must-gather/clusters/${cluster} -n ${ns} route,service &
    done

    # Collect the migration and velero CRs
    echo "[cluster=${cluster}] Gathering MTC and Velero CRs for namespaces [${namespaces[@]}]"
    /usr/bin/gather_crs ${cluster} ${namespaces} &

    # Collect the logs"
    echo "[cluster=${cluster}] Gathering logs for namespaces [${namespaces[@]}]"
    /usr/bin/gather_logs ${cluster} ${namespaces} ${logs_since} &
  done

  # Collect metrics from Prometheus
  if [ -z "$essential_only" ]; then
    echo "[cluster=host] Gathering prometheus metrics"
    /usr/bin/gather_metrics &
  else
    echo "Essential-only must-gather was requested. Skipping prometheus metrics collection"
  fi

  # Collect memory profile data
  if [ -z "$essential_only" ]; then
    /usr/bin/gather_pprof ${localns} &
  else
    echo "Essential-only must-gather was requested. Skipping pprof memory profile gather"
  fi

  # Waits for gather_crs, gather_logs, gather_metrics running in background
  echo "Waiting for background gather tasks to finish"
  wait
done

# If running essential-only must-gather, delete duplicated logs collected by oc adm inspect
if [ -z "$essential_only" ]; then
  echo "Full must-gather was requested. Keeping full log payload from oc adm inspect"
else
  echo "Essential-only must-gather was requested. Removing duplicate pod logs from oc adm inspect to reduce must-gather size"
  find /must-gather/clusters/*/namespaces/*/pods/ -name '*.log' -delete
fi

# Wipe secrets from migrated-namespaces data
echo "Scrubbing secrets collected from migrated namespaces"
find must-gather/clusters/*/migrated-namespaces/namespaces/*/*/ -name *secrets.yaml* -delete

# Shorten logs from migrated-namespaces to last 100 lines
echo "Shortening logs collected from migrated namespaces to last 100 lines"
for logfile in $(find must-gather/clusters/*/migrated-namespaces/namespaces/*/*/ -name *.log); do
  tail -100 "${logfile}" > tmp.log && mv tmp.log "${logfile}"
done

# Tar all must-gather artifacts for faster transmission 
echo "Tarring must-gather artifacts..."
archive_path="/must-gather-archive"
mkdir -p ${archive_path}
tar -zcf ${archive_path}/must-gather.tar.gz /must-gather/
rm -rf /must-gather/*
mv ${archive_path}/must-gather.tar.gz /must-gather/
rmdir ${archive_path}
echo "Created /must-gather/must-gather.tar.gz"


echo "Waiting for copy phase..."
exit 0
